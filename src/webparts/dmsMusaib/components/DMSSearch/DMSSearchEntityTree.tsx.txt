import { SPFI } from "@pnp/sp";
import { PermissionKind } from "@pnp/sp/security";
import * as React from "react";
import { getSP } from "../../loc/pnpjsConfig";


export const EntityTree=(props:any)=>    
{
    const sp: SPFI = getSP();

    const fetchAndBuildTree2 = async () => {
        // event.preventDefault()
        // event.stopImmediatePropagation()
        // event.stopPropagation()
        try {
          //Old working code
          //  Fetch data from EntityDivisionDepartmentMappingMasterList
          const entityItems = await sp.web.lists
            .getByTitle("EntityDivisionDepartmentMappingMasterList")
            .items.select(
              "Entitylookup/Title, Entitylookup/SiteURL", "Entitylookup/SiteID",
              "Devisionlookup/Title",
              "Departmentlookup/Title",
              "Devisionlookup/Active",
              "Departmentlookup/Active"
            )
            .expand("Entitylookup", "Devisionlookup", "Departmentlookup")
            .filter("Entitylookup/Active eq 'Yes'")();
          console.log(entityItems, "entityItems 1")
          const uniqueEntityMap = new Map();
          const uniqueEntitiesWithAccess: any = [];
    
          // Loop through each item and check permissions
          for (const item of entityItems) {
            const entityTitle = item.Entitylookup.Title;
            try {
              const subsiteWeb = await sp.site.openWebById(item.Entitylookup.SiteID);
              const hasAccess = await subsiteWeb.web.currentUserHasPermissions(PermissionKind.ViewListItems);
    
              if (hasAccess) {
                // Add to uniqueEntitiesWithAccess only if user has access
                uniqueEntityMap.set(entityTitle, item); // Store the item or any required data
                uniqueEntitiesWithAccess.push(item);  // Add the item to the list of entities with access
                console.log(`User has access to site: ${entityTitle}`, item);
              } else {
                console.log(`User does not have access to site: ${entityTitle}`);
              }
            } catch (error) {
              console.error(`Error while checking access for site: ${entityTitle}`, error);
            }
          }
          // console.log(uniqueEntityMap, "uniqueEntityMap ......")
          // console.log(uniqueEntitiesWithAccess, "uniqueEntitiesWithAccess");
          /// New Code 
    
    
          // Fetch data from DMSFolderMaster
          const folderItems = await sp.web.lists
            .getByTitle("DMSFolderMaster")
            .items.getAll();
          console.log("folderItems", folderItems);
    
          const myButton = document.getElementById("mybutton");
          const createFileButton = document.getElementById("createFileButton");
          const createFileButton2 = document.getElementById("createFileButton2");
          const createFolderButton = document.getElementById("createFolderButton");
          // Create a map to hold folder data by SiteTitle, Devision, Department
          const folderMap = new Map();
          folderItems.forEach((folderItem) => {
            const {
              SiteTitle,
              Devision,
              Department,
              DocumentLibraryName,
              FolderName,
              ParentFolderId,
              FolderPath,
              IsRename
            } = folderItem;
    
            if (SiteTitle) {
              const key = `${SiteTitle.trim()}::${Devision?.trim() || ""}::${Department?.trim() || ""}`;
              if (!folderMap.has(key)) {
                folderMap.set(key, []);
              }
              if (DocumentLibraryName) {
                folderMap
                  .get(key)
                  .push({
                    IsRename,
                    FolderPath,
                    ParentFolderId,
                    DocumentLibraryName,
                    FolderName: Array.isArray(FolderName)
                      ? FolderName
                      : [FolderName],
                  });
              }
            }
          });
          // console.log(folderMap, "folderMap");
          // const entitiesMap = new Map();
          const entitiesMap: any = new Map();
    
          uniqueEntitiesWithAccess.forEach((item: any) => {
            const entityTitle = item.Entitylookup.Title;
            const siteURL = item.Entitylookup.SiteURL;
            const siteID = item.Entitylookup.SiteID;
    
            if (!entitiesMap.has(entityTitle)) {
              entitiesMap.set(entityTitle, {
                siteURL: siteURL,
                entityTitle: entityTitle,
                siteID: siteID,
                devisions: new Map(),
              });
            }
    
            const entry = entitiesMap.get(entityTitle);
            const devisionTitle = item.Devisionlookup?.Title;
            const departmentTitle = item.Departmentlookup?.Title;
            const isDevisionActive = item.Devisionlookup?.Active === "Yes";
            const isDepartmentActive = item.Departmentlookup?.Active === "Yes";
    
            if (devisionTitle && isDevisionActive) {
              if (!entry.devisions.has(devisionTitle)) {
                entry.devisions.set(devisionTitle, {
                  departments: new Set(),
                  docLibs: new Set(),
                });
              }
              const devisionEntry = entry.devisions.get(devisionTitle);
              if (departmentTitle && isDepartmentActive) {
                devisionEntry.departments.add(departmentTitle);
              } else if (!departmentTitle || !isDepartmentActive) {
                const nullDeptKey = `${entityTitle.trim()}::${devisionTitle.trim()}::`;
                // Handle case where department is null or inactive
              }
            }
          });
          const buildFolderStructure = (
            folderList: HTMLElement,
            folders: any[],
            parentFolderId: string | null
          ) => {
            const filteredFolders = folders.filter(
              (folder) => folder.ParentFolderId === parentFolderId
            );
            filteredFolders.forEach((folder) => {
              const folderElement = document.createElement("li");
              folderElement.textContent = folder.FolderName;
              folderList.appendChild(folderElement);
    
              const childFolderList = document.createElement("ul");
              childFolderList.style.display = "none";
              folderElement.appendChild(childFolderList);
    
              folderElement.addEventListener("click", (event) => {
                event.stopPropagation();
                // currentFolder = folder.FolderName;
                toggleVisibility(childFolderList);
              });
    
              // Recursively build the structure for subfolders
              buildFolderStructure(childFolderList, folders, folder.FolderName);
            });
          };
          // Build the folder tree structure in the DOM
          const container = document.getElementById("folderContainer2");
    
          if (container) {
            container.innerHTML = ""; // Clear previous contents
          } else {
            console.error("Container element not found");
          }
          // container.innerHTML = ''; // Clear previous contents
    
          const toggleVisibility = (element: any, forceShow = false) => {
            const isVisible = element.style.display === "block";
            element.style.display = isVisible && !forceShow ? "none" : "block";
          };
          const createImageElement = (src: string, alt: string) => {
            const img = document.createElement("img");
            img.src = require("../../assets/add-folder.png");
            img.alt = alt;
            img.style.float = "left";
            img.style.width = "20px"; // Adjust the size as needed
            img.style.height = "20px"; // Adjust the size as needed
            img.style.marginRight = "5px"; // Space between image and text
            return img;
          };
         
          const createToggleButton = (siteurl: string) => {
            const link = document.createElement("a");
            // link.id="toggle-plus-minus";
            link.textContent = "+"; // Initial text
            link.className = "toggle-button"
            link.style.cursor = "pointer";
            link.style.textDecoration = "none";
            link.setAttribute("siteurl", siteurl);
            link.addEventListener("click", (e) => {
              e.preventDefault();
              let siteurl = (e.target as HTMLElement).getAttribute("siteurl");
              setSearchQueryPath(`${siteurl}*`);
              runSearch(`${siteurl}`);
            });
    
            return link;
          };
          entitiesMap.forEach((value: any, entityTitle: any) => {
            const titleElement = document.createElement("p");
    
            // titleElement.textContent = entityTitle;
            titleElement.classList.add("folder", "icon");
            titleElement.style.cursor = "pointer";
            // const entityImage = createImageElement(
            //   "icons/entity-icon.png",
            //   "Entity Icon"
            // );
            const toggleButton = createToggleButton(value.siteURL);
            titleElement.appendChild(toggleButton);
            titleElement.appendChild(document.createTextNode(entityTitle));
    
            if (container) {
              container.appendChild(titleElement);
            } else {
              console.error("Container element not found");
            }
    
            const documentList = document.createElement("ul");
            titleElement.appendChild(documentList);
            documentList.style.display = "none";
            /////start: Display Document library with recursive folder under Enitiy directly when Devision and Department Null /////
            const nullKey = `${entityTitle.trim()}::::`;
            if (folderMap.has(nullKey)) {
              const documentLibraries = folderMap.get(nullKey) || [];
    
              // Create a map to store unique DocumentLibraryNames and their details
              const uniqueDocLibs = new Map();
    
              // Iterate over document libraries and populate the map with unique DocumentLibraryNames
              documentLibraries.forEach((item: any) => {
                if (!uniqueDocLibs.has(item.DocumentLibraryName)) {
                  uniqueDocLibs.set(item.DocumentLibraryName, {
                    folders: [],
                    folderPath: item.FolderPath, // Store FolderPath with other details
                  });
                }
                uniqueDocLibs.get(item.DocumentLibraryName).folders.push(item);
              });
    
              // Now render each unique DocumentLibraryName and its associated folders
              uniqueDocLibs.forEach((data, docLibName) => {
                const docLibElement = document.createElement("li");
                // New code to check the Document library name is Rename or not start
                const checkIsRename = data.folders.filter((item: any) =>
                  item.FolderName.length === 1 && item.FolderName[0] === null
                );
                // console.log("checkIsRename", checkIsRename);
                let renameText = docLibName;
                if (checkIsRename[0].IsRename !== null) {
                  renameText = checkIsRename[0].IsRename;
                }
                // End
                docLibElement.textContent = renameText;
                // docLibElement.textContent = docLibName;
                // console.log("Data of doclib/folder", data);
                // Optionally display the FolderPath in the docLibElement
                const pathText = document.createElement("span");
                // pathText.textContent = ` (${data.folderPath})`; // Display FolderPath
                docLibElement.appendChild(pathText);
    
                documentList.appendChild(docLibElement);
    
                const folderList = document.createElement("ul");
                folderList.style.display = "none";
                folderList.style.width = "240px";
                const entityImage = createImageElement(
                  "icons/entity-icon.png",
                  "Entity Icon"
                );
                docLibElement.appendChild(entityImage);
                docLibElement.appendChild(folderList);
    
                // Handle click to toggle the visibility of the folder list
                docLibElement.addEventListener("click", (event: any) => {
                  event.preventDefault()
                  event.stopPropagation();
                  // setlistorgriddata('')
                  // setShowMyrequButtons(false)
                  // setShowMyfavButtons(false)
                  handleNavigation(value.entityTitle, null, null, docLibName, null)
                  toggleVisibility(folderList);
                  getdoclibdata(data.folderPath, value.siteID, docLibName);
                  currentfolderpath = data.folderPath
                  currentDocumentLibrary = docLibName;
                  currentEntityURL = value.siteURL;
                  currentEntity = value.entityTitle
                  currentsiteID = value.siteID
                  currentDevision = ''
                  currentDepartment = ''
                  currentFolder = ''
    
                  // console.log(currentEntityURL, "currentEntityURL")
                  // console.log(currentsiteID, "currentsiteID")
                  // console.log(currentEntity, "currentEntity")
                  // console.log(currentDocumentLibrary, "currentFolder")
                  // console.log(currentfolderpath, "currentfolderpath")
                  // console.log(currentDevision, "currentfolderpath")
                  // console.log(currentDepartment, "currentfolderpath")
                  createFileButton.style.display = "block";
                  createFileButton2.style.display = "block";
                  if (createFolderButton) {
                    createFolderButton.style.display = "block"
                  }
    
                  if (createFileButton) {
                    createFileButton.style.display = "block";
                  }
                  if (createFileButton2) {
                    createFileButton2.style.display = "block";
                  }
    
                  if (myButton) {
                    myButton.textContent = `Create Folder under ${docLibName}`;
                  } else {
                    console.error();
                  }
                });
    
                // Handle double-click to hide the folder list
                docLibElement.addEventListener("dblclick", (event) => {
                  event.stopPropagation();
                  toggleVisibility(folderList, false);
                });
    
                // Function to build the folder structure recursively
                const buildFolderStructure = (
                  parentFolderId: any,
                  parentElement: any
                ) => {
                  data.folders.forEach((item: any) => {
                    const folderNamesArray = Array.isArray(item.FolderName)
                      ? item.FolderName
                      : [item.FolderName];
    
                    folderNamesArray.forEach((folderName: any) => {
                      if (folderName && item.ParentFolderId === parentFolderId) {
                        // Only display non-null folder names
                        const folderElement = document.createElement("li");
                        // New code to check the folder library name is Rename or not start
                        let folderRenameText = folderName;
                        if (item.IsRename !== null) {
                          folderRenameText = item.IsRename
                        }
                        // End
                        // folderElement.textContent = folderName;
                        folderElement.textContent = folderRenameText;
                        parentElement.appendChild(folderElement);
                        const entityImage = createImageElement(
                          "icons/entity-icon.png",
                          "Entity Icon"
                        );
                        folderElement.appendChild(entityImage);
                        const subFolderList = document.createElement("ul");
                        subFolderList.style.display = "none";
                        subFolderList.style.width = "240px";
                        folderElement.appendChild(subFolderList);
    
                        folderElement.addEventListener("click", (event: any) => {
                          event.preventDefault();  // Prevent default action
                          event.stopPropagation();  // Stop event bubbling
                          console.log("Event listener triggered");
                          currentEntityURL = value.siteURL;
                          currentsiteID = value.siteID
                          currentEntity = value.entityTitle
                          currentDocumentLibrary = docLibName;
                          currentFolder = folderName;
                          parentfolder = item.ParentFolderId;
                          currentfolderpath = item.FolderPath;
                          currentDevision = ''
                          currentDepartment = ''
                          console.log(currentEntityURL, "currentEntityURL")
                          console.log(currentsiteID, "currentsiteID")
                          console.log(currentEntity, "currentEntity")
                          console.log(currentDocumentLibrary, "currentDocumentLibrary")
                          console.log(currentFolder, "currentFolder")
                          console.log(parentfolder, "parentfolder")
                          console.log(currentfolderpath, "currentfolderpath");
                          handleNavigation(value.entityTitle, null, null, docLibName, folderName)
                          event.stopPropagation();
                          getdoclibdata(item.FolderPath, currentsiteID, docLibName)
                          if (myButton) {
                            myButton.textContent = `Create Folder under ${folderName}`;
                          } else {
                            console.error();
                          }
    
    
                          toggleVisibility(subFolderList);
    
                          // Clear existing sub-folder list to avoid duplications
                          subFolderList.innerHTML = "";
    
                          // Recursively build the sub-folder structure
                          buildFolderStructure(folderName, subFolderList);
                        });
                      }
                    });
                  });
                };
    
                // Start building the folder structure from the root level (null ParentFolderId)
                // buildFolderStructure(null, folderList);
              });
            }
            /////End Display Document library with recursive folder under Enitiy directly when Devision and Department Null /////
            const devisionList = document.createElement("ul");
            devisionList.style.display = "none";
            titleElement.appendChild(devisionList);
    
            value.devisions.forEach((devisionValue: any, devisionTitle: any) => {
              const devisionElement = document.createElement("li");
              devisionElement.textContent = devisionTitle;
              devisionElement.classList.add("folder", "icon");
              devisionElement.style.cursor = "pointer";
              devisionList.appendChild(devisionElement);
    
              const docLibList = document.createElement("ul");
              docLibList.style.display = "none";
              const entityImage = createImageElement(
                "icons/entity-icon.png",
                "Entity Icon"
              );
              devisionElement.appendChild(entityImage);
              devisionElement.appendChild(docLibList);
    
              // Display unique DocumentLibraryName under Devision
              console.log("devisionValue.docLibs", devisionValue.docLibs);
              devisionValue.docLibs.forEach((docLibName: any) => {
                const docLibElement = document.createElement("li");
                docLibElement.textContent = docLibName;
                docLibElement.classList.add("file-icon", "icon");
                docLibList.appendChild(docLibElement);
    
                const folderList = document.createElement("ul");
                folderList.style.display = "none";
    
                docLibElement.appendChild(folderList);
    
                const docLibKey = `${entityTitle.trim()}::${devisionTitle.trim()}::`;
                const docLibFolders = folderMap.get(docLibKey) || [];
                docLibFolders.forEach((folderItem: any) => {
                  console.log("Folder under divisions", folderItem);
                  const folderElement = document.createElement("li");
                  folderElement.textContent = folderItem.FolderName;
    
                  folderList.appendChild(folderElement);
                });
    
                docLibElement.addEventListener("click", (event) => {
                  console.log(devisionValue, "devisionValue");
                  event.stopPropagation();
                  currentDocumentLibrary = docLibName;
                  // currentFolder = '';
                  currentDevision = devisionTitle;
                  // currentDepartment = '';
                  currentEntityURL = value.siteURL;
                  currentEntity = value.entityTitle
                  currentsiteID = value.siteID
    
                  console.log("currentEntityURL", currentEntityURL);
                  console.log("currentEntity", currentEntity);
                  console.log("currentsiteID", currentsiteID);
                  console.log("currentDevision", currentDevision);
                  console.log("currentDocumentLibrary", currentDocumentLibrary);
                  if (myButton) {
                    myButton.textContent = `Create Library under ${docLibName}`;
                  } else {
                    console.error();
                  }
    
                  toggleVisibility(folderList);
                });
    
                docLibElement.addEventListener("dblclick", (event) => {
                  event.stopPropagation();
                  toggleVisibility(folderList, false);
                });
              });
    
              const departmentList = document.createElement("ul");
    
              departmentList.style.display = "none";
              devisionElement.appendChild(departmentList);
    
              devisionValue.departments.forEach((departmentTitle: any) => {
                const departmentElement = document.createElement("li");
                departmentElement.textContent = departmentTitle;
                departmentElement.classList.add("folder");
                departmentElement.style.cursor = "pointer";
                departmentList.appendChild(departmentElement);
    
                const documentList = document.createElement("ul");
                documentList.style.display = "none";
                documentList.style.width = "300px";
                const entityImage = createImageElement(
                  "icons/entity-icon.png",
                  "Entity Icon"
                );
                departmentElement.appendChild(entityImage);
                departmentElement.appendChild(documentList);
    
                departmentElement.addEventListener("click", (event) => {
                  currentEntityURL = value.siteURL;
                  currentsiteID = value.siteID
                  currentEntity = value.entityTitle;
                  currentDevision = devisionTitle;
                  currentDepartment = departmentTitle;
                  currentDocumentLibrary = ''
                  currentFolder = ''
                  currentfolderpath = ''
                  console.log("currentEntityURL", currentEntityURL);
                  console.log("currentsiteID", currentsiteID);
                  console.log("currentEntity", currentEntity);
                  console.log("currentDevision", currentDevision);
                  console.log("currentDepartment", currentDepartment);
                  handleNavigation(value.entityTitle, devisionTitle, departmentTitle, null, null)
                  event.stopPropagation();
                  if (myButton) {
                    myButton.textContent = `Create Library under ${departmentTitle}`;
                  } else {
                    console.error();
                  }
    
                  // Prevent toggling visibility before the list is populated
                  if (documentList.innerHTML === "") {
                    const key = `${entityTitle.trim()}::${devisionTitle.trim()}::${departmentTitle.trim()}`;
                    const documentLibraries = folderMap.get(key) || [];
                    documentList.innerHTML = "";
                    const uniqueDocLibs = new Map();
    
                    documentLibraries.forEach((item: any) => {
                      if (!uniqueDocLibs.has(item.DocumentLibraryName)) {
                        uniqueDocLibs.set(item.DocumentLibraryName, {
                          folders: [],
                          folderPath: item.FolderPath, // Store FolderPath
                        });
                      }
                      uniqueDocLibs
                        .get(item.DocumentLibraryName)
                        .folders.push(item);
                    });
    
                    uniqueDocLibs.forEach((data, docLibName) => {
                      console.log(uniqueDocLibs, "uniqueDocLibs")
                      const docLibElement = document.createElement("li");
                      docLibElement.textContent = docLibName;
    
                      // Optionally display the FolderPath in the docLibElement
                      // const pathText = document.createElement("span");
                      // pathText.textContent = ` (${data.folderPath})`; // Display FolderPath
                      // docLibElement.appendChild(pathText);
    
                      documentList.appendChild(docLibElement);
    
                      const folderList = document.createElement("ul");
                      folderList.style.display = "none";
                      folderList.style.width = "351px";
                      const entityImage = createImageElement(
                        "icons/entity-icon.png",
                        "Entity Icon"
                      );
                      docLibElement.appendChild(entityImage);
                      docLibElement.appendChild(folderList);
    
                      docLibElement.addEventListener("click", (event) => {
                        event.stopPropagation();
                        currentEntityURL = value.siteURL;
                        currentsiteID = value.siteID
                        currentEntity = value.entityTitle;
                        currentDevision = devisionTitle;
                        currentDocumentLibrary = docLibName;
                        currentDepartment = departmentTitle;
                        currentfolderpath = data.folderPath,
                          currentFolder = ''
                        // console.log(data, data, "data")
                        // console.log("currentEntityURL", currentEntityURL);
                        // console.log("currentsiteID", currentsiteID);
                        // console.log("currentEntity", currentEntity);
                        // console.log("currentDevision", currentDevision);
                        // console.log("currentDepartment", currentDepartment);
                        // console.log("currentDocumentLibrary", currentDocumentLibrary);
                        // console.log("currentfolderpath", currentfolderpath);
                        // console.log("parentfolder", parentfolder);
                        getdoclibdata(data.folderPath, value.siteID, docLibName)
                        handleNavigation(value.entityTitle, devisionTitle, departmentTitle, docLibName, null)
                        console.log(
                          "FolderPath for document library:",
                          data.folderPath
                        );
                        toggleVisibility(folderList);
                        const createFileButton = document.getElementById("createFileButton")
                        const createFileButton2 = document.getElementById("createFileButton")
                        createFileButton.style.display = "block";
                        createFileButton2.style.display = "block";
                        if (myButton) {
                          myButton.textContent = `Create Folder under ${docLibName}`;
                        } else {
                          console.error();
                        }
                      });
    
                      docLibElement.addEventListener("dblclick", (event) => {
                        event.stopPropagation();
                        toggleVisibility(folderList, false);
                      });
                      const buildFolderStructure = (
                        parentFolderId: any,
                        parentElement: any
                      ) => {
                        data.folders.forEach((item: any) => {
    
                          const folderNamesArray = Array.isArray(item.FolderName)
                            ? item.FolderName
                            : [item.FolderName];
    
                          folderNamesArray.forEach((folderName: any) => {
    
                            if (
                              folderName &&
                              item.ParentFolderId === parentFolderId
                            ) {
                              const folderElement = document.createElement("li");
                              folderElement.textContent = folderName;
                              parentElement.appendChild(folderElement);
                              const entityImage = createImageElement(
                                "icons/entity-icon.png",
                                "Entity Icon"
                              );
                              folderElement.appendChild(entityImage);
                              const subFolderList = document.createElement("ul");
                              subFolderList.style.display = "none";
                              folderElement.appendChild(subFolderList);
    
                              folderElement.addEventListener("click", (event) => {
                                currentEntityURL = value.siteURL;
                                currentEntity = value.entityTitle;
                                currentsiteID = value.siteID
                                currentDevision = devisionTitle;
                                currentDepartment = departmentTitle;
                                currentDocumentLibrary = docLibName;
                                currentFolder = folderName
    
                                // console.log("currentEntityURL", currentEntityURL);
                                // console.log("currentEntity", currentEntity);
                                // console.log("currentsiteID", currentsiteID);
                                // console.log("currentDevision", currentDevision);
                                // console.log("currentDepartment", currentDepartment);
                                // console.log("currentDocumentLibrary", currentDocumentLibrary);
                                // console.log("currentfolderpath", item.FolderPath);
                                getdoclibdata(item.FolderPath, currentsiteID, docLibName)
                                handleNavigation(value.entityTitle, devisionTitle, departmentTitle, docLibName, folderName)
                                const createFileButton = document.getElementById("createFileButton")
                                createFileButton.style.display = "block";
                                const createFileButton2 = document.getElementById("createFileButton")
                                createFileButton2.style.display = "block";
                                if (myButton) {
                                  myButton.textContent = `Create Folder under ${folderName}`;
                                } else {
                                  console.error();
                                }
                                event.stopPropagation();
                                toggleVisibility(subFolderList);
                                subFolderList.innerHTML = "";
                                buildFolderStructure(folderName, subFolderList);
                              });
                            }
                          });
                        });
                      };
                      buildFolderStructure(null, folderList);
                    });
                  }
    
                  toggleVisibility(documentList);
                });
    
                departmentElement.addEventListener("dblclick", (event) => {
                  event.stopPropagation();
                  toggleVisibility(documentList, false);
                });
              });
    
              ///Start: display all Document libraries under Devision directly if Department null with nested folder //////
              const keyForDevisionOnly = `${entityTitle.trim()}::${devisionTitle.trim()}::`;
    
              if (folderMap.has(keyForDevisionOnly)) {
                const documentLibraries = folderMap.get(keyForDevisionOnly) || [];
                // console.log(documentLibraries, "documentLibraries");
                const uniqueDocLibNames = new Set();
    
                documentLibraries.forEach((item: any) => {
                  const normalizedDocLibName =
                    item.DocumentLibraryName.trim().toLowerCase();
                  console.log("item of doclib under division", item);
    
                  if (!uniqueDocLibNames.has(normalizedDocLibName)) {
                    uniqueDocLibNames.add(normalizedDocLibName);
    
                    const docLibElement = document.createElement("li");
                    // New code to check the Document library name is Rename or not start
                    // const checkIsRename = item.folders.filter((item:any) => 
                    //   item.FolderName.length === 1 && item.FolderName[0] === null
                    // );
                    // console.log("checkIsRename",checkIsRename);
                    // let renameText=item.DocumentLibraryName;
                    // if(checkIsRename[0].IsRename !== null){
                    //   renameText=checkIsRename[0].IsRename;
                    // }
                    // End
                    // docLibElement.textContent = renameText;
                    docLibElement.textContent = item.DocumentLibraryName;
    
                    departmentList.appendChild(docLibElement);
    
                    const folderList = document.createElement("ul");
                    folderList.style.display = "none";
                    const entityImage = createImageElement(
                      "icons/entity-icon.png",
                      "Entity Icon"
                    );
                    docLibElement.appendChild(entityImage);
    
                    docLibElement.appendChild(folderList);
    
                    docLibElement.addEventListener("click", (event) => {
                      event.stopPropagation();
                      currentEntityURL = value.siteURL; // Use the SiteURL from entitiesMap
                      currentsiteID = value.siteID
                      currentEntity = value.entityTitle
                      currentDevision = devisionTitle;
                      currentDepartment = ''
                      currentFolder = ''
                      currentDocumentLibrary = item.DocumentLibraryName;
                      currentfolderpath = item.FolderPath;
                      console.log("currentEntityURL", currentEntityURL);
                      console.log("currentsiteID", currentsiteID);
                      console.log("currentEntity", currentEntity);
                      console.log("currentDevision", currentDevision);
                      console.log("currentDepartment", currentDepartment);
                      console.log("currentDocumentLibrary", currentDocumentLibrary);
                      console.log("currentfolderpath", currentfolderpath);
                      getdoclibdata(item.FolderPath, value.siteID, item.DocumentLibraryName)
                      handleNavigation(value.entityTitle, devisionTitle, null, item.DocumentLibraryName)
                      const createFileButton = document.getElementById("createFileButton")
                      createFileButton.style.display = "block";
                      const createFileButton2 = document.getElementById("createFileButton2")
                      createFileButton2.style.display = "block";
                      if (myButton) {
                        myButton.textContent = `Create Folder under ${item.DocumentLibraryName}`;
                      } else {
                        console.error();
                      }
                      toggleVisibility(folderList);
                      folderList.innerHTML = "";
                      const buildFolderStructure = (
                        parentFolderId: any,
                        parentElement: any
                      ) => {
                        const createImageElement = (src: string, alt: string) => {
                          const img = document.createElement("img");
                          img.src = require("../../assets/add-folder.png");
                          img.alt = alt;
                          img.style.float = "left";
                          img.style.width = "20px"; // Adjust the size as needed
                          img.style.height = "20px"; // Adjust the size as needed
                          img.style.marginRight = "5px"; // Space between image and text
                          return img;
                        };
                        documentLibraries.forEach((libItem: any) => {
    
                          if (
                            libItem.DocumentLibraryName.trim().toLowerCase() ===
                            normalizedDocLibName
                          ) {
                            const folderNamesArray = Array.isArray(
                              libItem.FolderName
                            )
                              ? libItem.FolderName
                              : [libItem.FolderName];
    
                            folderNamesArray.forEach((folderName: any) => {
    
                              if (
                                folderName &&
                                libItem.ParentFolderId === parentFolderId
                              ) {
                                // Only display non-null folder names
                                const folderElement2 = document.createElement("li");
                                folderElement2.textContent = folderName;
                                parentElement.appendChild(folderElement2);
                                const folderPath = libItem.FolderPath;
                                const entityImage = createImageElement(
                                  "icons/entity-icon.png",
                                  "Entity Icon"
                                );
                                folderElement2.appendChild(entityImage);
                                const subFolderList2 = document.createElement("ul");
                                subFolderList2.style.display = "none";
    
                                // const entityImage = createImageElement('icons/entity-icon.png', 'Entity Icon')
                                folderElement2.appendChild(entityImage);
                                subFolderList2.appendChild(entityImage);
                                folderElement2.appendChild(subFolderList2);
    
                                folderElement2.addEventListener(
    
                                  "click",
                                  (event) => {
                                    currentEntityURL = value.siteURL; // Use the SiteURL from entitiesMap
                                    currentsiteID = value.siteID
                                    currentEntity = value.entityTitle
                                    currentDevision = devisionTitle;
                                    currentDepartment = null
                                    currentDocumentLibrary = item.DocumentLibraryName;
                                    currentFolder = folderName
                                    currentDepartment = ''
                                    currentFolder = folderPath
                                    // currentfolderpath = item.FolderPath;
                                    parentfolder = parentFolderId
                                    console.log("currentEntityURL", currentEntityURL);
                                    console.log("currentsiteID", currentsiteID);
    
                                    console.log("currentEntity", currentEntity);
                                    console.log("currentDevision", currentDevision);
                                    console.log("currentDepartment", currentDepartment);
                                    console.log("currentDocumentLibrary", currentDocumentLibrary);
                                    console.log("currentFolder", currentFolder);
                                    console.log("currentfolderpath", folderPath);
                                    console.log("parentfolder", parentfolder);
                                    handleNavigation(value.entityTitle, devisionTitle, null, item.DocumentLibraryName, folderName)
                                    event.stopPropagation();
                                    toggleVisibility(subFolderList2);
                                    console.log("enter ee");
                                    getdoclibdata(folderPath, currentsiteID, item.DocumentLibraryName)
                                    const createFileButton = document.getElementById("createFileButton")
                                    createFileButton.style.display = "block";
                                    const createFileButton2 = document.getElementById("createFileButton")
                                    createFileButton2.style.display = "block";
                                    if (myButton) {
                                      myButton.textContent = `Create Folder under ${folderName}`;
                                    } else {
                                      console.error();
                                    }
    
                                    // Clear existing sub-folder list to avoid duplications
                                    subFolderList2.innerHTML = "";
    
                                    // Recursively build the sub-folder structure
                                    buildFolderStructure(
                                      folderName,
                                      subFolderList2
                                    );
                                  }
                                );
                              }
                            });
                          }
                        });
                      };
    
                      // Start building the folder structure from the root level (null ParentFolderId)
                      buildFolderStructure(null, folderList);
                    });
    
                    // Optionally, expand the folder structure by default
                    // buildFolderStructure(folderList, documentLibraries, null);
                  }
                });
              }
    
              ///End: display all Document libraries under Devision directly if Department null with nested folder //////
    
              devisionElement.addEventListener("click", (event) => {
                const breadcrumbElement = document.getElementById("breadcrumb");
                if (breadcrumbElement) {
                  breadcrumbElement.style.display = "none";
                }
                event.stopPropagation();
                currentDevision = devisionTitle;
                currentEntityURL = value.siteURL;
                currentEntity = value.entityTitle
                currentsiteID = value.siteID
                currentDepartment = ''
                currentDocumentLibrary = ''
                currentFolder = ''
                currentfolderpath = ''
                console.log("currentEntityURL", currentEntityURL);
                console.log("currentsiteID", currentsiteID);
                console.log("currentEntity", currentEntity);
                console.log("currentDevision", currentDevision);
                handleNavigation(value.entityTitle, devisionTitle, null, null, null)
                toggleVisibility(departmentList);
                // Toggle plus/minus icon
                devisionElement.classList.remove("expanded");
                // const //createFileButton=document.getElementById("createFileButton")
                // createFileButton.style.display="block";
                if (myButton) {
                  myButton.textContent = `Create Library under ${devisionTitle}`;
                } else {
                  console.error();
                }
              });
    
              devisionElement.addEventListener("dblclick", (event) => {
                event.stopPropagation();
                toggleVisibility(departmentList, false);
                // Toggle plus/minus icon
                devisionElement.classList.remove("expanded");
              });
            });
    
            let clickTimer: any;
            titleElement.addEventListener("click", async (event) => {
              const breadcrumbElement = document.getElementById("breadcrumb");
              if (breadcrumbElement) {
                breadcrumbElement.style.display = "none";
              }
              // alert("in first")
              // new code added.
              // toggle createfolder button based on the permission
              // Get the users in the group
              // const subsiteContext=await sp.site.openWebById(value.siteID);
              // const usersFromAdmin = await subsiteContext.web.siteGroups.getByName(`${value.entityTitle}_Admin`).users();
              // const usersFromInitiator=await subsiteContext.web.siteGroups.getByName(`${value.entityTitle}_Initiator`).users();
              // console.log("usersFromAdmin",usersFromAdmin);
              // console.log("usersFromInitiator",usersFromInitiator);
              try {
                const currentUser = await sp.web.currentUser();
                const userGroups = await sp.web.siteUsers.getById(currentUser.Id).groups();
                const isMemberOfGroup = userGroups.some(group => group.Title === `${currentEntity}_Admin`);
                const isMemberOfSuperAdmin = userGroups.some(group => group.Title === `DMSSuper_Admin`);
                console.log("isMemberOfSuperAdmin", isMemberOfSuperAdmin);
                console.log(`Is member of ${currentEntity}_Admin:`, isMemberOfGroup);
                // console.log(`User is a member of the group: ${currentEntity}_Admin`);
                if (isMemberOfGroup || isMemberOfSuperAdmin) {
                  console.log(`User is a member of the group: ${currentEntity}_Admin`);
                  if (createFileButton) {
                    createFileButton.style.display = "none";
                  }
                  if (createFileButton2) {
                    createFileButton2.style.display = "block";
                  }
                } else {
                  console.log(`User is not a member of the group: ${currentEntity}_Admin`);
                  if (createFileButton) {
                    createFileButton.style.display = "none";
                  }
                  if (createFileButton2) {
                    createFileButton2.style.display = "none";
                  }
    
    
                }
              } catch (error) {
                console.log(`User is not a member of the group: ${currentEntity}_Admin`);
                if (createFileButton) {
                  createFileButton.style.display = "none";
                }
                if (createFileButton2) {
                  createFileButton2.style.display = "none";
                }
    
    
              }
            })
            titleElement.addEventListener("click", async (event) => {
              const breadcrumbElement = document.getElementById("breadcrumb");
              if (breadcrumbElement) {
                breadcrumbElement.style.display = "none";
              }
              setdisplayuploadfileandcreatefolder(true)
              // alert("in second")
              // Toggle +/- button
              // const plusMinus = document.getElementById("toggle-plus/minus");
              if (toggleButton.textContent === "+") {
                toggleButton.textContent = "-";
              } else if (toggleButton.textContent) {
                toggleButton.textContent = "+";
              }
              const createFileButton = document.getElementById("createFileButton")
              const createFileButton2 = document.getElementById("createFileButton2")
              try {
                const currentUser = await sp.web.currentUser();
                const userGroups = await sp.web.siteUsers.getById(currentUser.Id).groups();
                const isMemberOfGroup = userGroups.some(group => group.Title === `${currentEntity}_Admin`);
                const isMemberOfSuperAdmin = userGroups.some(group => group.Title === `DMSSuper_Admin`);
                console.log("isMemberOfSuperAdmin", isMemberOfSuperAdmin);
                console.log(`Is member of ${currentEntity}_Admin:`, isMemberOfGroup);
                // console.log(`User is a member of the group: ${currentEntity}_Admin`);
                if (isMemberOfGroup || isMemberOfSuperAdmin) {
                  console.log(`User is a member of the group: ${currentEntity}_Admin`);
                  if (createFileButton) {
                    createFileButton.style.display = "none";
                  }
                  if (createFileButton2) {
                    createFileButton2.style.display = "block";
                  }
                } else {
                  console.log(`User is not a member of the group: ${currentEntity}_Admin`);
                  if (createFileButton) {
                    createFileButton.style.display = "none";
                  }
                  if (createFileButton2) {
                    createFileButton2.style.display = "none";
                  }
    
    
                }
              } catch (error) {
                console.log(`User is not a member of the group: ${currentEntity}_Admin`);
                if (createFileButton) {
                  createFileButton.style.display = "none";
                }
                if (createFileButton2) {
                  createFileButton2.style.display = "none";
                }
    
    
              }
              event.stopPropagation();
              // const createFileButton2 = document.getElementById("createFileButton2");
              // Clear any existing timer
              clearTimeout(clickTimer);
    
              // Set a new timer
              clickTimer = setTimeout(() => {
                setlistorgriddata('');
                currentEntity = value.entityTitle
                currentEntityURL = value.siteURL;
                currentsiteID = value.siteID;
                currentDevision = ""
                currentDepartment = ''
                currentDocumentLibrary = ""
                currentFolder = ""
                currentfolderpath = ""
                console.log(value.entityTitle, "value");
                console.log(currentsiteID, "currentsiteID");
                console.log("currentEntityURL", currentEntityURL);
                mydata.push(value.siteURL);
                console.log(mydata, "my mydata");
                toggleVisibility(devisionList);
                toggleVisibility(documentList);
                const hidegidvewlistviewbutton = document.getElementById("hidegidvewlistviewbutton");
                const hidegidvewlistviewbutton2 = document.getElementById("hidegidvewlistviewbutton2");
                if (hidegidvewlistviewbutton) {
                  console.log("enter here .....................");
                  hidegidvewlistviewbutton.style.display = 'none';
                }
                if (hidegidvewlistviewbutton2) {
                  console.log("enter here .....................");
                  hidegidvewlistviewbutton2.style.display = 'none';
                }
                handleNavigation(value.entityTitle, null, null, null, null);
                // Toggle plus/minus icon
                titleElement.classList.toggle("expanded");
                console.log(value, "value");
                const createFileButton = document.getElementById("createFileButton");
                const createFileButton2 = document.getElementById("createFileButton2");
                // if (createFolderButton) {
                //     createFolderButton.style.display = "block";
                // }
                if (createFileButton) {
                  createFileButton.style.display = "none";
                }
                if (createFileButton2) {
                  createFileButton2.style.display = "block";
                }
                if (myButton) {
                  myButton.textContent = `Create Library under ${entityTitle}`;
                } else {
                  console.error();
                }
                // fetchData(currentEntityURL);
              }, 300); // Adjust the delay as needed
            });
    
            titleElement.addEventListener("dblclick", async (event) => {
              const breadcrumbElement = document.getElementById("breadcrumb");
              if (breadcrumbElement) {
                breadcrumbElement.style.display = "none";
              }
    
              setdisplayuploadfileandcreatefolder(true)
              event.stopPropagation();
              try {
                const currentUser = await sp.web.currentUser();
                const userGroups = await sp.web.siteUsers.getById(currentUser.Id).groups();
                const isMemberOfGroup = userGroups.some(group => group.Title === `${currentEntity}_Admin`);
                const isMemberOfSuperAdmin = userGroups.some(group => group.Title === `DMSSuper_Admin`);
                console.log("isMemberOfSuperAdmin", isMemberOfSuperAdmin);
                console.log(`Is member of ${currentEntity}_Admin:`, isMemberOfGroup);
                // console.log(`User is a member of the group: ${currentEntity}_Admin`);
                if (isMemberOfGroup || isMemberOfSuperAdmin) {
                  console.log(`User is a member of the group: ${currentEntity}_Admin`);
                  if (createFileButton) {
                    createFileButton.style.display = "none";
                  }
                  if (createFileButton2) {
                    createFileButton2.style.display = "block";
                  }
                } else {
                  console.log(`User is not a member of the group: ${currentEntity}_Admin`);
                  if (createFileButton) {
                    createFileButton.style.display = "none";
                  }
                  if (createFileButton2) {
                    createFileButton2.style.display = "none";
                  }
    
    
                }
              } catch (error) {
                console.log(`User is not a member of the group: ${currentEntity}_Admin`);
                if (createFileButton) {
                  createFileButton.style.display = "none";
                }
                if (createFileButton2) {
                  createFileButton2.style.display = "none";
                }
    
    
              }
              // Clear the single click timer
              clearTimeout(clickTimer);
    
              setlistorgriddata('');
              toggleVisibility(devisionList, false);
              toggleVisibility(documentList, false);
              // Toggle plus/minus icon
              titleElement.classList.remove("expanded");
            });
          });
        } catch (error) {
          console.error("Error fetching or building folder tree:", error);
        }
      }

    React.useEffect(() => {
        //searctest();
        fetchAndBuildTree2();
      }, [])
      
    return (
        <div style={{ position: 'sticky', top: '100px' }} className="is-sticky">  
          <div id="folderContainer2"></div>
        </div>
    )
}